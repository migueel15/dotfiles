#!/usr/bin/env bash
set -euo pipefail

# Asumimos que logger ya fue cargado antes en el script principal

# Función para filtrar un archivo deps:
# Ignora líneas vacías y comentarios (líneas que empiezan con '#')
parse_deps_file() {
  local file="$1"
  grep -Ev '^\s*($|#)' "$file" || true
}

# Función para instalar paquetes desde un archivo deps usando yay
install_packages_from_deps() {
  local deps_file="$1"

  if [[ ! -f "$deps_file" ]]; then
    log_warn "Archivo de dependencias no encontrado: $deps_file"
    return
  fi

  local packages
  packages=$(parse_deps_file "$deps_file")

  if [[ -z "$packages" ]]; then
    log_info "No hay paquetes para instalar en $deps_file"
    return
  fi

  local -a pkgs_array
  mapfile -t pkgs_array <<<"$packages"

  local failed_packages=()
  local installed_count=0
  local total_count=${#pkgs_array[@]}

  log_info "Instalando $total_count paquetes desde $(basename "$deps_file")..."

  # Pre-autenticar sudo para evitar que se cuelgue pidiendo contraseña
  sudo -v

  # Instalar cada paquete individualmente
  for package in "${pkgs_array[@]}"; do
    log_info "[$((installed_count + 1))/$total_count] Instalando $package..."
    
    if yay -S --needed --noconfirm "$package" &> /dev/null; then
      installed_count=$((installed_count + 1))
    else
      log_warn "Error al instalar $package"
      failed_packages+=("$package")
    fi
  done

  # Reporte final
  if [[ ${#failed_packages[@]} -eq 0 ]]; then
    log_success "Todos los paquetes ($installed_count/$total_count) instalados correctamente desde $(basename "$deps_file")"
  else
    log_warn "$installed_count/$total_count paquetes instalados. Fallos: ${failed_packages[*]}"
  fi
}

